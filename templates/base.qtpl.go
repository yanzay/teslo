// This file is automatically generated by qtc from "base.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line templates/base.qtpl:1
package templates

//line templates/base.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

// All the text outside function templates is treated as comments,
// i.e. it is just ignored by quicktemplate compiler (`qtc`). It is for humans.
//
// Hello is a simple template function.
//

//line templates/base.qtpl:6
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line templates/base.qtpl:7
type Item struct {
	ID      string
	Content string
}

//line templates/base.qtpl:13
func StreamHello(qw422016 *qt422016.Writer, items []Item) {
	//line templates/base.qtpl:13
	qw422016.N().S(`
<html>
<head>
<title>Test title</title>
<script>
window.addEventListener("load", function(evt) {
  var ws = new WebSocket("ws://localhost:8080/ws");
  ws.onopen = function(e) {
    console.log("OPEN");
  };
  ws.onclose = function(e) {
    console.log("CLOSE");
  };
  ws.onmessage = function(e) {
    var message = JSON.parse(e.data);
    var el = document.getElementById(message.id)
    el.innerHTML = message.content;
  };
  ws.onerror = function(e) {
    console.log("Error: ", e.data);
  };
  var app = document.getElementById("app")

  var clickHandler = function(e) {
    console.log(e.target.id);
    if (e.target.id) {
      ws.send(JSON.stringify({event: "click", id: e.target.id}));
    }
  }
  app.addEventListener("click", clickHandler)
});
</script>
</head>
<body id="app">
    `)
	//line templates/base.qtpl:47
	StreamTodo(qw422016, items)
	//line templates/base.qtpl:47
	qw422016.N().S(`
</body>
</html>
`)
//line templates/base.qtpl:50
}

//line templates/base.qtpl:50
func WriteHello(qq422016 qtio422016.Writer, items []Item) {
	//line templates/base.qtpl:50
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line templates/base.qtpl:50
	StreamHello(qw422016, items)
	//line templates/base.qtpl:50
	qt422016.ReleaseWriter(qw422016)
//line templates/base.qtpl:50
}

//line templates/base.qtpl:50
func Hello(items []Item) string {
	//line templates/base.qtpl:50
	qb422016 := qt422016.AcquireByteBuffer()
	//line templates/base.qtpl:50
	WriteHello(qb422016, items)
	//line templates/base.qtpl:50
	qs422016 := string(qb422016.B)
	//line templates/base.qtpl:50
	qt422016.ReleaseByteBuffer(qb422016)
	//line templates/base.qtpl:50
	return qs422016
//line templates/base.qtpl:50
}

//line templates/base.qtpl:52
func StreamBody(qw422016 *qt422016.Writer, name string) {
	//line templates/base.qtpl:52
	qw422016.N().S(`
  <p>Hello, `)
	//line templates/base.qtpl:53
	qw422016.E().S(name)
	//line templates/base.qtpl:53
	qw422016.N().S(`!</p>
`)
//line templates/base.qtpl:54
}

//line templates/base.qtpl:54
func WriteBody(qq422016 qtio422016.Writer, name string) {
	//line templates/base.qtpl:54
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line templates/base.qtpl:54
	StreamBody(qw422016, name)
	//line templates/base.qtpl:54
	qt422016.ReleaseWriter(qw422016)
//line templates/base.qtpl:54
}

//line templates/base.qtpl:54
func Body(name string) string {
	//line templates/base.qtpl:54
	qb422016 := qt422016.AcquireByteBuffer()
	//line templates/base.qtpl:54
	WriteBody(qb422016, name)
	//line templates/base.qtpl:54
	qs422016 := string(qb422016.B)
	//line templates/base.qtpl:54
	qt422016.ReleaseByteBuffer(qb422016)
	//line templates/base.qtpl:54
	return qs422016
//line templates/base.qtpl:54
}

//line templates/base.qtpl:56
func StreamTodo(qw422016 *qt422016.Writer, items []Item) {
	//line templates/base.qtpl:56
	qw422016.N().S(`
  `)
	//line templates/base.qtpl:57
	for _, item := range items {
		//line templates/base.qtpl:57
		qw422016.N().S(`
    <input type="checkbox" id="`)
		//line templates/base.qtpl:58
		qw422016.E().S(item.ID)
		//line templates/base.qtpl:58
		qw422016.N().S(`">`)
		//line templates/base.qtpl:58
		qw422016.E().S(item.Content)
		//line templates/base.qtpl:58
		qw422016.N().S(`</input>
  `)
		//line templates/base.qtpl:59
	}
	//line templates/base.qtpl:59
	qw422016.N().S(`
`)
//line templates/base.qtpl:60
}

//line templates/base.qtpl:60
func WriteTodo(qq422016 qtio422016.Writer, items []Item) {
	//line templates/base.qtpl:60
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line templates/base.qtpl:60
	StreamTodo(qw422016, items)
	//line templates/base.qtpl:60
	qt422016.ReleaseWriter(qw422016)
//line templates/base.qtpl:60
}

//line templates/base.qtpl:60
func Todo(items []Item) string {
	//line templates/base.qtpl:60
	qb422016 := qt422016.AcquireByteBuffer()
	//line templates/base.qtpl:60
	WriteTodo(qb422016, items)
	//line templates/base.qtpl:60
	qs422016 := string(qb422016.B)
	//line templates/base.qtpl:60
	qt422016.ReleaseByteBuffer(qb422016)
	//line templates/base.qtpl:60
	return qs422016
//line templates/base.qtpl:60
}
